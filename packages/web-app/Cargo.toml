[package]
name = "web-app"
version = "0.1.0"
authors = ["pegasust <pegasucksgg@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2.63"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
wee_alloc = { version = "0.4.5", optional = true }
itertools = "0.10.5"
getrandom =  { version = "0.2.8", features=["js"]}

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[package.metadata.scripts]
hello = "echo hello"
test = "cargo test"
# pack-test = "wasm-pack test --firefox"
# helper that puts web-app to our dist folder: pkg
bundle = "rollup public/index.js --format iife --file pkg/bundle.js && cp public/index.html pkg/ && cp -r pkg ../../"
build = "wasm-pack build --target web --out-name web-app --release && cargo run-script bundle"
build-dev = "wasm-pack build --target web --out-name web-app --dev && cargo run-script bundle"
dev = "cargo watch -x 'run-script build-dev'"
# serves the content of pkg/web-app as a server
serve = "cargo run -p server"
serve-watch = "cargo watch -w apps/server -x 'run -p server'"

[build]
target="wasm32-unknown-unknown"
